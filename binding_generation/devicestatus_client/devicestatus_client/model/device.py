# coding: utf-8

"""
    Device Status

    Device Status can provide updates on the device's connectivity state  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from devicestatus_client import schemas  # noqa: F401


class Device(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            phoneNumber = schemas.StrSchema
            networkAccessIdentifier = schemas.StrSchema
        
            @staticmethod
            def ipv4Address() -> typing.Type['DeviceIpv4Addr']:
                return DeviceIpv4Addr
            ipv6Address = schemas.StrSchema
            __annotations__ = {
                "phoneNumber": phoneNumber,
                "networkAccessIdentifier": networkAccessIdentifier,
                "ipv4Address": ipv4Address,
                "ipv6Address": ipv6Address,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networkAccessIdentifier"]) -> MetaOapg.properties.networkAccessIdentifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv4Address"]) -> 'DeviceIpv4Addr': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6Address"]) -> MetaOapg.properties.ipv6Address: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["phoneNumber", "networkAccessIdentifier", "ipv4Address", "ipv6Address", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> typing.Union[MetaOapg.properties.phoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networkAccessIdentifier"]) -> typing.Union[MetaOapg.properties.networkAccessIdentifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv4Address"]) -> typing.Union['DeviceIpv4Addr', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6Address"]) -> typing.Union[MetaOapg.properties.ipv6Address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["phoneNumber", "networkAccessIdentifier", "ipv4Address", "ipv6Address", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        phoneNumber: typing.Union[MetaOapg.properties.phoneNumber, str, schemas.Unset] = schemas.unset,
        networkAccessIdentifier: typing.Union[MetaOapg.properties.networkAccessIdentifier, str, schemas.Unset] = schemas.unset,
        ipv4Address: typing.Union['DeviceIpv4Addr', schemas.Unset] = schemas.unset,
        ipv6Address: typing.Union[MetaOapg.properties.ipv6Address, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Device':
        return super().__new__(
            cls,
            *args,
            phoneNumber=phoneNumber,
            networkAccessIdentifier=networkAccessIdentifier,
            ipv4Address=ipv4Address,
            ipv6Address=ipv6Address,
            _configuration=_configuration,
            **kwargs,
        )

from devicestatus_client.model.device_ipv4_addr import DeviceIpv4Addr
