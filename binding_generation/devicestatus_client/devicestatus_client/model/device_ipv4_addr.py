# coding: utf-8

"""
    Device Status

    Device Status can provide updates on the device's connectivity state  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from devicestatus_client import schemas  # noqa: F401


class DeviceIpv4Addr(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            publicAddress = schemas.StrSchema
            privateAddress = schemas.StrSchema
            publicPort = schemas.IntSchema
            __annotations__ = {
                "publicAddress": publicAddress,
                "privateAddress": privateAddress,
                "publicPort": publicPort,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicAddress"]) -> MetaOapg.properties.publicAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateAddress"]) -> MetaOapg.properties.privateAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicPort"]) -> MetaOapg.properties.publicPort: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["publicAddress", "privateAddress", "publicPort", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicAddress"]) -> typing.Union[MetaOapg.properties.publicAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateAddress"]) -> typing.Union[MetaOapg.properties.privateAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicPort"]) -> typing.Union[MetaOapg.properties.publicPort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["publicAddress", "privateAddress", "publicPort", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        publicAddress: typing.Union[MetaOapg.properties.publicAddress, str, schemas.Unset] = schemas.unset,
        privateAddress: typing.Union[MetaOapg.properties.privateAddress, str, schemas.Unset] = schemas.unset,
        publicPort: typing.Union[MetaOapg.properties.publicPort, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeviceIpv4Addr':
        return super().__new__(
            cls,
            *_args,
            publicAddress=publicAddress,
            privateAddress=privateAddress,
            publicPort=publicPort,
            _configuration=_configuration,
            **kwargs,
        )
