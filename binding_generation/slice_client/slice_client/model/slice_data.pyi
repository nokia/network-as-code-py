# coding: utf-8

"""
    Slice

    Slice management, creating and deleting network slices.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slice_client import schemas  # noqa: F401


class SliceData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "csi_id",
            "slice",
            "state",
            "order_id",
        }
        
        class properties:
        
            @staticmethod
            def slice() -> typing.Type['Slice']:
                return Slice
            csi_id = schemas.StrSchema
            order_id = schemas.StrSchema
            state = schemas.StrSchema
            startPollingAt = schemas.IntSchema
        
            @staticmethod
            def administrativeState() -> typing.Type['AdministrativeState']:
                return AdministrativeState
            __annotations__ = {
                "slice": slice,
                "csi_id": csi_id,
                "order_id": order_id,
                "state": state,
                "startPollingAt": startPollingAt,
                "administrativeState": administrativeState,
            }
    
    csi_id: MetaOapg.properties.csi_id
    slice: 'Slice'
    state: MetaOapg.properties.state
    order_id: MetaOapg.properties.order_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slice"]) -> 'Slice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csi_id"]) -> MetaOapg.properties.csi_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_id"]) -> MetaOapg.properties.order_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startPollingAt"]) -> MetaOapg.properties.startPollingAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["administrativeState"]) -> 'AdministrativeState': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["slice", "csi_id", "order_id", "state", "startPollingAt", "administrativeState", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slice"]) -> 'Slice': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csi_id"]) -> MetaOapg.properties.csi_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_id"]) -> MetaOapg.properties.order_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startPollingAt"]) -> typing.Union[MetaOapg.properties.startPollingAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["administrativeState"]) -> typing.Union['AdministrativeState', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["slice", "csi_id", "order_id", "state", "startPollingAt", "administrativeState", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        csi_id: typing.Union[MetaOapg.properties.csi_id, str, ],
        slice: 'Slice',
        state: typing.Union[MetaOapg.properties.state, str, ],
        order_id: typing.Union[MetaOapg.properties.order_id, str, ],
        startPollingAt: typing.Union[MetaOapg.properties.startPollingAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        administrativeState: typing.Union['AdministrativeState', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SliceData':
        return super().__new__(
            cls,
            *args,
            csi_id=csi_id,
            slice=slice,
            state=state,
            order_id=order_id,
            startPollingAt=startPollingAt,
            administrativeState=administrativeState,
            _configuration=_configuration,
            **kwargs,
        )

from slice_client.model.administrative_state import AdministrativeState
from slice_client.model.slice import Slice
