# coding: utf-8

"""
    Slice

    Slice management, creating and deleting network slices.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slice_client import schemas  # noqa: F401


class SliceInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "service_type",
        }
        
        class properties:
            
            
            class service_type(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_1 = schemas.IntSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            SliceTypeName,
                            cls.any_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'service_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class differentiator(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Fa-f0-9]{6}$',  # noqa: E501
                    }]
            __annotations__ = {
                "service_type": service_type,
                "differentiator": differentiator,
            }
    
    service_type: MetaOapg.properties.service_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_type"]) -> MetaOapg.properties.service_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["differentiator"]) -> MetaOapg.properties.differentiator: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["service_type", "differentiator", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_type"]) -> MetaOapg.properties.service_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["differentiator"]) -> typing.Union[MetaOapg.properties.differentiator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["service_type", "differentiator", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        service_type: typing.Union[MetaOapg.properties.service_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        differentiator: typing.Union[MetaOapg.properties.differentiator, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SliceInfo':
        return super().__new__(
            cls,
            *args,
            service_type=service_type,
            differentiator=differentiator,
            _configuration=_configuration,
            **kwargs,
        )

from slice_client.model.slice_type_name import SliceTypeName
