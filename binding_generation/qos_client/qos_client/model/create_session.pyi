# coding: utf-8

"""
    QoS

    QoS manages communication bandwidth for a given device.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qos_client import schemas  # noqa: F401


class CreateSession(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "appIp",
            "qos",
            "ip",
            "id",
        }
        
        class properties:
            qos = schemas.StrSchema
            id = schemas.StrSchema
            ip = schemas.StrSchema
            appIp = schemas.StrSchema
        
            @staticmethod
            def ports() -> typing.Type['PortsSpec']:
                return PortsSpec
        
            @staticmethod
            def appPorts() -> typing.Type['PortsSpec']:
                return PortsSpec
            __annotations__ = {
                "qos": qos,
                "id": id,
                "ip": ip,
                "appIp": appIp,
                "ports": ports,
                "appPorts": appPorts,
            }
    
    appIp: MetaOapg.properties.appIp
    qos: MetaOapg.properties.qos
    ip: MetaOapg.properties.ip
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appIp"]) -> MetaOapg.properties.appIp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ports"]) -> 'PortsSpec': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appPorts"]) -> 'PortsSpec': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["qos", "id", "ip", "appIp", "ports", "appPorts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appIp"]) -> MetaOapg.properties.appIp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ports"]) -> typing.Union['PortsSpec', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appPorts"]) -> typing.Union['PortsSpec', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["qos", "id", "ip", "appIp", "ports", "appPorts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        appIp: typing.Union[MetaOapg.properties.appIp, str, ],
        qos: typing.Union[MetaOapg.properties.qos, str, ],
        ip: typing.Union[MetaOapg.properties.ip, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        ports: typing.Union['PortsSpec', schemas.Unset] = schemas.unset,
        appPorts: typing.Union['PortsSpec', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateSession':
        return super().__new__(
            cls,
            *args,
            appIp=appIp,
            qos=qos,
            ip=ip,
            id=id,
            ports=ports,
            appPorts=appPorts,
            _configuration=_configuration,
            **kwargs,
        )

from qos_client.model.ports_spec import PortsSpec
