# coding: utf-8

"""
    QoS on Demand

    Manage QoS sessions for users on demand.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qos_client import schemas  # noqa: F401


class QosStatusChangedEvent(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "eventTime",
            "eventType",
            "eventDetail",
        }
        
        class properties:
        
            @staticmethod
            def eventType() -> typing.Type['EventType']:
                return EventType
            eventTime = schemas.StrSchema
        
            @staticmethod
            def eventDetail() -> typing.Type['EventDetail']:
                return EventDetail
            __annotations__ = {
                "eventType": eventType,
                "eventTime": eventTime,
                "eventDetail": eventDetail,
            }
    
    eventTime: MetaOapg.properties.eventTime
    eventType: 'EventType'
    eventDetail: 'EventDetail'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventType"]) -> 'EventType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventTime"]) -> MetaOapg.properties.eventTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventDetail"]) -> 'EventDetail': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["eventType", "eventTime", "eventDetail", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventType"]) -> 'EventType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventTime"]) -> MetaOapg.properties.eventTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventDetail"]) -> 'EventDetail': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["eventType", "eventTime", "eventDetail", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        eventTime: typing.Union[MetaOapg.properties.eventTime, str, ],
        eventType: 'EventType',
        eventDetail: 'EventDetail',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QosStatusChangedEvent':
        return super().__new__(
            cls,
            *args,
            eventTime=eventTime,
            eventType=eventType,
            eventDetail=eventDetail,
            _configuration=_configuration,
            **kwargs,
        )

from qos_client.model.event_detail import EventDetail
from qos_client.model.event_type import EventType
